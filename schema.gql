type EventEntry {
  name: String!
  recurring: Int!
  date: Date!
  description: String!
  location: String!
  attendees: [User]
  image_url: String
  event_url: String
  event_meet_url: String
  dao: String
  public: Boolean!
  price: Int!
  location_name: String
  official_contact: String
  # _id: Generated by Fauna as each document's unique identifier
  # _ts: Timestamp generated by Fauna upon object updating
}

type User {
  name: String!
  address: String!
  events: [EventEntry]
  createdAt: Time!
  # _id: Generated by Fauna as each document's unique identifier
  # _ts: Timestamp generated by Fauna upon object updating
}

# A query named 'entries' which returns an array of EventEntry objects
# Implicit arguments: _size (count) and _cursor (location within the Index)
type Query {
  entries: [EventEntry!]
    @resolver(name: "listLatestEvents", paginated: true)
}
